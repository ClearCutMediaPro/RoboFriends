{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","robots.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","username","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fcdbc270.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id}) => {\r\n    \r\n    return (\r\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    \r\n    return <div className=\"tc\">\r\n                {\r\n                     robots.map((user, i) => \r\n                     {\r\n                            return (\r\n                            <Card\r\n                                key={i}\r\n                                id={robots[i].id}\r\n                                name={robots[i].name}\r\n                                email={robots[i].email}\r\n                            />\r\n                            );\r\n                    }) \r\n                }\r\n            </div>;\r\n}\r\n\r\nexport default CardList;\r\n\r\n\r\n/**This constant Cardlist is used to map the amount of users located in \r\n     * robots.js and reiterates the array of each user.\r\n     * key prop should have something that doesn't change. For example, index\r\n     * (or i in our case) could change if array items get moved. So a better key in this case\r\n     * would be something unique like id.\r\n     * \r\n     * Cardlist is a pure function in the sense that it receives an input and always\r\n     * returns the same output (pure components)\r\n     */","import React from 'react';\r\n\r\n/**\r\n * We have created the SearchBox which \r\n * has a function which returns an input\r\n */\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    return (\r\n      <div className=\"pa2\">\r\n        <input\r\n          className=\"pa3 ba b--green bg-lightest-blue\"\r\n          type=\"search\"\r\n          placeholder=\"search robots\"\r\n          onChange={searchChange}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","export const robots = [\r\n         {\r\n           id: 1,\r\n           name: \"Leanne Graham\",\r\n           username: \"Bret\",\r\n           email: \"Sincere@april.biz\"\r\n         },\r\n         {\r\n           id: 2,\r\n           name: \"Ervin Howell\",\r\n           username: \"Antonette\",\r\n           email: \"Shanna@melissa.tv\"\r\n         },\r\n         {\r\n           id: 3,\r\n           name: \"Clementine Bauch\",\r\n           username: \"Samantha\",\r\n           email: \"Nathan@yesenia.net\"\r\n         },\r\n         {\r\n           id: 4,\r\n           name: \"Patricia Lebsack\",\r\n           username: \"Karianne\",\r\n           email: \"Julianne.OConner@kory.org\"\r\n         },\r\n         {\r\n           id: 5,\r\n           name: \"Chelsey Dietrich\",\r\n           username: \"Kamren\",\r\n           email: \"Lucio_Hettinger@annie.ca\"\r\n         },\r\n         {\r\n           id: 6,\r\n           name: \"Mrs. Dennis Schulist\",\r\n           username: \"Leopoldo_Corkery\",\r\n           email: \"Karley_Dach@jasper.info\"\r\n         },\r\n         {\r\n           id: 7,\r\n           name: \"Kurtis Weissnat\",\r\n           username: \"Elwyn.Skiles\",\r\n           email: \"Telly.Hoeger@billy.biz\"\r\n         },\r\n         {\r\n           id: 8,\r\n           name: \"Nicholas Runolfsdottir V\",\r\n           username: \"Maxime_Nienow\",\r\n           email: \"Sherwood@rosamond.me\"\r\n         },\r\n         {\r\n           id: 9,\r\n           name: \"Glenna Reichert\",\r\n           username: \"Delphine\",\r\n           email: \"Chaim_McDermott@dana.io\"\r\n         },\r\n         {\r\n           id: 10,\r\n           name: \"Clementina DuBuque\",\r\n           username: \"Moriah.Stanton\",\r\n           email: \"Rey.Padberg@karina.biz\"\r\n         },\r\n         {\r\n           id: 11,\r\n           name: \"Tawanda Razika\",\r\n           username: \"Tawanda.Razika\",\r\n           email: \"Tawanda.Razika@karina.biz\"\r\n         },\r\n         {\r\n           id: 12,\r\n           name: \"Vanessa Sum\",\r\n           username: \"Vanessa.Sum\",\r\n           email: \"Vanessa.Sum@karina.biz\"\r\n         }\r\n       ];\r\n","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\nreturn <div style={{overflowY:'scroll', height: '900px'}}>\r\n    {props.children}\r\n</div>;\r\n};\r\n\r\nexport default Scroll;\r\n\r\n/**\r\n * children - scroll can use children as a way to render\r\n * its children.\r\n * using (props.children) we can create components that wrap\r\n * other components\r\n * \r\n * using style={{}} we can use common css commands\r\n */","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info) {\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1> Ooops. That is not good, something went wrong</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from \"../components/CardList\"; // This calls the CardList.js\r\nimport SearchBox from '../components/SearchBox'; // This calls the SearchBox.js\r\nimport { robots } from \"../robots\"; // This calls the robots.js\r\nimport '../containers/App.css';\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n          robots: [],\r\n          searchField: \"\"\r\n        };\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value})\r\n    }\r\n     \r\n    componentDidMount() {\r\n      fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response=> response.json())\r\n      .then(users=> this.setState({robots: robots}));\r\n    }\r\n\r\n    render() {\r\n      const {robots,searchField} = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n          return robot.name\r\n            .toLowerCase()\r\n            .includes(searchField.toLowerCase());\r\n        })\r\n        return  !robots.length ?\r\n          <h1 className=\"tc\">Loading ...</h1> : (\r\n            \r\n              <div className=\"tc\">\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <hr />\r\n\r\n                <Scroll>\r\n                <ErrorBoundry>\r\n                <CardList robots={filteredRobots} />\r\n                </ErrorBoundry>\r\n                </Scroll>\r\n\r\n              </div>\r\n              \r\n            );\r\n        \r\n         \r\n    }\r\n}\r\n\r\n/**\r\n * The below code is a standard which is mandatory for every app so that it can be output \r\n */ \r\n\r\nexport default App; \r\n\r\n/**\r\n * STATE is the description of the App, also known as an object that describes\r\n * the application. In our case it is the robots and input from the SearchBox\r\n * STATE is able to change the value of the SearchBox and Robots (what gets displayed).\r\n * PROPS are things that come out of STATE.\r\n * A parent feeds STATE >> props into a child component and \r\n * As soon as a child component receives a STATE then it is a property (PROPS).\r\n * That child can never change the property\r\n * \r\n * onSearchChange (is a syntax that has been made up - could be anything)\r\n *  Remember that with an event in console.log it has to have (event.target.value)\r\n * which gives us the value of the input from Search\r\n */","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons'; // Tachyons is just the same as bootstrap classes as it provides styling in JSX\r\nimport App from \"./containers/App\"; // This is the father of all our components\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />,document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}